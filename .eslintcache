[{"C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\index.js":"1","C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\harmMachine.js":"2","C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\melodyMachine.js":"3","C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\generator.js":"4"},{"size":63,"mtime":1612362496133,"results":"5","hashOfConfig":"6"},{"size":3284,"mtime":1612217100317,"results":"7","hashOfConfig":"6"},{"size":5890,"mtime":1612362502703,"results":"8","hashOfConfig":"6"},{"size":1571,"mtime":1612362500899,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1hai7qw",{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\index.js",["19"],"C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\harmMachine.js",["20","21"],"//get seq of chords , and check the prob of this option\n\nclass HarmMachine {\n  constructor() {\n    this.valid_chords_porg = [\n      [\"C\", \"Am\", \"F\", \"G7\"],\n      [\"C\", \"Em\", \"F\", \"G7\"],\n      [\"C\", \"F\", \"Am\", \"G7\"],\n      [\"C\", \"Am\", \"Dm\", \"G7\"],\n      [\"C\", \"G\", \"F\", \"G7\"],\n      [\"Dm\", \"G\", \"C\", \"F\", \"Bdim\", \"E7\", \"Am\"],\n      [\"Am\", \"C\", \"F\", \"E7\"],\n    ];\n  }\n\n\ngetNgram(sequence, n) {\n  var ngramsArray = [];\n  for (var i = 0; i < sequence.length - (n - 1); i++) {\n      var subNgramsArray = [];\n      for (var j = 0; j < n; j++) {\n          subNgramsArray.push(sequence[i + j])\n      }\n      ngramsArray.push(subNgramsArray);\n  }\n  return ngramsArray\n}\n\ncreateProbabilitiesMap(n) {\n  let sequence = this.valid_chords_porg;\n  let result = {}\n  let items = []\n  for (let prog of sequence){\n    items = items.concat(this.getNgram(prog, n));\n  }\n\n  for (let subarray of items) {\n      let x = subarray[0], y = subarray[1]\n      if (result[x] === undefined) {\n          result[x] = []\n      } \n      result[x].push(y)\n  }\n  // { 60: [62, 62, 62, 65], 64: [64, 64, 62, 62]}\n  Object.keys(result).map(key => {\n      result[key] = this.getProbabilities(result[key])\n  })\n  \n  return result\n}\n\ngetProbabilities(sequence) {\n  let freq = this.getFrequencyMap(sequence)\n  let length = Object.values(freq).reduce((a, b) => a + b);\n  Object.keys(freq).map(key => {\n      freq[key] /= length  // 3 > 3/4, 1 > 1/4\n  })\n\n  return freq;\n}\n\ngetFrequencyMap(sequence) {\n  let freq = {}\n  for (let item of sequence) {\n      if (freq[item]) freq[item]++\n      else  freq[item] = 1\n  }\n\n  return freq;\n}\n\n\n\n\n/*\n  generateNGram(n) {\n    var nGram = {};\n\n    //generate all n-1 permutations :\n    for (let chord of Object.keys(this.probMap)) {\n      let perm = this.permutations(chord, n - 1, \"\");\n      perm = perm.split(\"_\");\n      perm = perm.slice(0, perm.length - 1);\n\n\n      for (let p of perm) {\n        let prob = 1;\n        let perm_as_list = p.split(\",\");\n        for (let i = 0; i < perm_as_list.length - 1; i++) {\n          prob *= this.probMap[perm_as_list[i]][perm_as_list[i + 1]];\n        }\n        nGram[p] = prob;\n      }\n    }\n\n    console.log(nGram);\n    return nGram;\n  }\n\n  permutations(chord, m, prefix) {\n    let ans = \"\";\n    if (m === 1) {\n      return prefix + chord + \"_\";\n    } else {\n      let options = Object.keys(this.probMap[chord]);\n      for (let option of options) {\n        let pre = prefix + chord + \",\";\n        ans += this.permutations(option, m - 1, pre);\n      }\n      return ans;\n    }\n  }\n\n  updateProbMap(data) {\n    let map = this.probMap;\n    //initialize\n    for (let chord of data) {\n      if (map[chord] == null) {\n        map[chord] = {};\n      }\n    }\n\n    // counter\n    for (let i = 0; i < data.length - 1; i++) {\n      map[data[i]][data[i + 1]] =\n        map[data[i]][data[i + 1]] == null ? 1 : map[data[i]][data[i + 1]] + 1;\n    }\n    this.probMap = map;\n  }\n\n  convertToProb() {\n    let map = this.probMap;\n    for (let chord of Object.keys(map)) {\n      let sum = 0;\n      for (let nextChord of Object.keys(map[chord])) {\n        sum += map[chord][nextChord];\n      }\n\n      for (let nextChord of Object.keys(map[chord])) {\n        map[chord][nextChord] /= sum;\n      }\n    }\n\n    this.probMap = map;\n  }\n  */\n \n}\n\nexport default HarmMachine;\n","C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\melodyMachine.js",[],"C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\generator.js",[],{"ruleId":"22","severity":1,"message":"23","line":2,"column":5,"nodeType":"24","messageId":"25","endLine":2,"endColumn":6},{"ruleId":"26","severity":1,"message":"27","line":45,"column":31,"nodeType":"28","messageId":"29","endLine":45,"endColumn":33},{"ruleId":"26","severity":1,"message":"27","line":55,"column":29,"nodeType":"28","messageId":"29","endLine":55,"endColumn":31},"no-unused-vars","'g' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]