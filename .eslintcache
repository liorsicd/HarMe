[{"C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\index.js":"1","C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\harmMachine.js":"2","C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\melodyMachine.js":"3","C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\generator.js":"4"},{"size":7954,"mtime":1614266604374,"results":"5","hashOfConfig":"6"},{"size":3946,"mtime":1613550334794,"results":"7","hashOfConfig":"6"},{"size":5965,"mtime":1613554354598,"results":"8","hashOfConfig":"6"},{"size":1580,"mtime":1614266937289,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hai7qw",{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\index.js",[],"C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\harmMachine.js",["20","21"],"//get seq of chords , and check the prob of this option\n\nclass HarmMachine {\n  constructor() {\n    this.valid_chords_porg = [\n      [\"C\", \"C\", \"F\", \"C\", \"Dm\", \"C\", \"G\", \"C\"],\n      [\"C\", \"Am\", \"F\", \"G\"],\n      [\"C\", \"Em\", \"F\", \"G\"],\n      [\"C\", \"F\", \"Am\", \"G\"],\n      [\"C\", \"F\", \"G\", \"F\"],\n      [\"C\", \"F\", \"C\", \"G\"],\n      [\"C\", \"F\", \"G\", \"Am\"],\n      [\"C\", \"F\", \"Dm\", \"G\"],\n      [\"C\", \"Am\", \"Dm\", \"G\"],\n      [\"C\", \"Dm\", \"Em\", \"F\", \"G\"],\n      [\"C\", \"Em\", \"F\", \"Am\"],\n      [\"C\", \"E\", \"Am\", \"F\"],\n      [\"C\", \"G\", \"F\", \"G\"],\n      [\"Dm\", \"G\", \"C\", \"F\", \"Bdim\", \"E\", \"Am\"],\n      [\"Am\", \"C\", \"F\", \"E\"],\n      [\"Am\", \"F\",\"C\", \"G\"],\n      [\"Am\", \"F\", \"Bdim\", \"E\"],\n      [\"Am\", \"F\", \"D\", \"E\"],\n      [\"Am\", \"G\", \"F\", \"E\"],\n      [\"Am\", \"C\", \"Dm\", \"Em\"],\n      [\"Am\", \"D\", \"E\", \"Am\"],\n      [\"F\", \"G\", \"Am\", \"Em\"],\n      [\"C\", \"F\", \"Bb\", \"F\"],\n      [\"C\", \"C\", \"Bdim\", \"E7\", \"Am\", \"Am\", \"F\", \"G\"],\n      [\"C\", \"C\", \"F\", \"C\", \"G\", \"F\" , \"C\", \"G\"],\n      [\"C\", \"G\", \"Am\", \"F\"],\n      [\"C\",\"G\",\"Am\",\"Em\",\"F\",\"C\",\"F\",\"G\"]\n    ];\n  }\n\n\ngetNgram(sequence, n) {\n  var ngramsArray = [];\n  for (var i = 0; i < sequence.length - (n - 1); i++) {\n      var subNgramsArray = [];\n      for (var j = 0; j < n; j++) {\n          subNgramsArray.push(sequence[i + j])\n      }\n      ngramsArray.push(subNgramsArray);\n  }\n  return ngramsArray\n}\n\ncreateProbabilitiesMap(n) {\n  let sequence = this.valid_chords_porg;\n  let result = {}\n  let items = []\n  for (let prog of sequence){\n    items = items.concat(this.getNgram(prog, n));\n  }\n\n  for (let subarray of items) {\n      let x = subarray[0], y = subarray[1]\n      if (result[x] === undefined) {\n          result[x] = []\n      } \n      result[x].push(y)\n  }\n  // { 60: [62, 62, 62, 65], 64: [64, 64, 62, 62]}\n  Object.keys(result).map(key => {\n      result[key] = this.getProbabilities(result[key])\n  })\n  \n  return result\n}\n\ngetProbabilities(sequence) {\n  let freq = this.getFrequencyMap(sequence)\n  let length = Object.values(freq).reduce((a, b) => a + b);\n  Object.keys(freq).map(key => {\n      freq[key] /= length  // 3 > 3/4, 1 > 1/4\n  })\n\n  return freq;\n}\n\ngetFrequencyMap(sequence) {\n  let freq = {}\n  for (let item of sequence) {\n      if (freq[item]) freq[item]++\n      else  freq[item] = 1\n  }\n\n  return freq;\n}\n\n\n\n\n/*\n  generateNGram(n) {\n    var nGram = {};\n\n    //generate all n-1 permutations :\n    for (let chord of Object.keys(this.probMap)) {\n      let perm = this.permutations(chord, n - 1, \"\");\n      perm = perm.split(\"_\");\n      perm = perm.slice(0, perm.length - 1);\n\n\n      for (let p of perm) {\n        let prob = 1;\n        let perm_as_list = p.split(\",\");\n        for (let i = 0; i < perm_as_list.length - 1; i++) {\n          prob *= this.probMap[perm_as_list[i]][perm_as_list[i + 1]];\n        }\n        nGram[p] = prob;\n      }\n    }\n\n    console.log(nGram);\n    return nGram;\n  }\n\n  permutations(chord, m, prefix) {\n    let ans = \"\";\n    if (m === 1) {\n      return prefix + chord + \"_\";\n    } else {\n      let options = Object.keys(this.probMap[chord]);\n      for (let option of options) {\n        let pre = prefix + chord + \",\";\n        ans += this.permutations(option, m - 1, pre);\n      }\n      return ans;\n    }\n  }\n\n  updateProbMap(data) {\n    let map = this.probMap;\n    //initialize\n    for (let chord of data) {\n      if (map[chord] == null) {\n        map[chord] = {};\n      }\n    }\n\n    // counter\n    for (let i = 0; i < data.length - 1; i++) {\n      map[data[i]][data[i + 1]] =\n        map[data[i]][data[i + 1]] == null ? 1 : map[data[i]][data[i + 1]] + 1;\n    }\n    this.probMap = map;\n  }\n\n  convertToProb() {\n    let map = this.probMap;\n    for (let chord of Object.keys(map)) {\n      let sum = 0;\n      for (let nextChord of Object.keys(map[chord])) {\n        sum += map[chord][nextChord];\n      }\n\n      for (let nextChord of Object.keys(map[chord])) {\n        map[chord][nextChord] /= sum;\n      }\n    }\n\n    this.probMap = map;\n  }\n  */\n \n}\n\nexport default HarmMachine;\n","C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\melodyMachine.js",["22"],"class NotesToChord {\n  constructor(notes, chords) {\n    this.notes = notes;\n    this.chords = chords;\n  }\n}\n\nclass MelodyMachine {\n  constructor() {\n    this.notesToChordList = [\n      new NotesToChord([-1, \"C\"], { C: 0.33, F: 0.33, Am: 0.33 }),\n      new NotesToChord([-1, \"D\"], { Dm: 0.33, G: 0.33, Bdim: 0.33 }),\n      new NotesToChord([-1, \"E\"], { Em: 0.33, C: 0.33, Am: 0.33 }),\n      new NotesToChord([-1, \"F\"], { F: 0.33, Dm: 0.33, Bdim: 0.33 }),\n      new NotesToChord([-1, \"G\"], { G: 0.33, Em: 0.33, C: 0.33 }),\n      new NotesToChord([-1, \"A\"], { Am: 0.33, F: 0.33, C: 0.33 }),\n      new NotesToChord([-1, \"B\"], { Bdim: 0.33, G: 0.33, Em: 0.33 }),\n      new NotesToChord([-1, -1], { C: 0.33, Am: 0.33, G: 0.33 }),\n\n      //C\n      new NotesToChord([\"C\", \"C\"], { C: 0.33, Am: 0.33, F: 0.33 }),\n      new NotesToChord([\"C\", \"D\"], { C: 0.33, Am: 0.33, Dm: 0.33 }),\n      new NotesToChord([\"C\", \"E\"], { C: 0.33, Am: 0.33, Em: 0.33 }),\n      new NotesToChord([\"C\", \"F\"], { F: 0.33, Dm: 0.33, Fm: 0.33 }),\n      new NotesToChord([\"C\", \"G\"], { C: 0.33, Cm: 0.33, Ab: 0.33 }),\n      new NotesToChord([\"C\", \"A\"], { Am: 0.33, F: 0.33, \"F#dim\": 0.33 }),\n      new NotesToChord([\"C\", \"B\"], { C: 0.33, Am: 0.33, Em: 0.33 }),\n      new NotesToChord([\"C\", -1], { C: 0.5, Am: 0.33, F: 0.33 }),\n\n      //D\n      new NotesToChord([\"D\", \"C\"], { Dm: 0.33, F: 0.33, Am: 0.33 }),\n      new NotesToChord([\"D\", \"D\"], { Dm: 0.33, G: 0.5, Bdim: 0.33 }),\n      new NotesToChord([\"D\", \"E\"], { Dm: 0.33, C: 0.33, Am: 0.33 }),\n      new NotesToChord([\"D\", \"F\"], { Dm: 0.33, Bb: 0.33, Bdim: 0.33 }),\n      new NotesToChord([\"D\", \"G\"], { G: 0.33, Em: 0.33, C: 0.33 }),\n      new NotesToChord([\"D\", \"A\"], { Dm: 0.33, Bdim: 0.33, D: 0.33 }),\n      new NotesToChord([\"D\", \"B\"], { Bdim: 0.33, G: 0.33, Dm: 0.33 }),\n      new NotesToChord([\"D\", -1], { Dm: 0.33, G: 0.33, Bdim: 0.33 }),\n\n      //E\n      new NotesToChord([\"E\", \"C\"], { C: 0.33, Am: 0.33, Em: 0.33 }),\n      new NotesToChord([\"E\", \"D\"], { Em: 0.33, G: 0.33, C: 0.33 }),\n      new NotesToChord([\"E\", \"E\"], { C: 0.5, Am: 0.33, Em: 0.33 }),\n      new NotesToChord([\"E\", \"F\"], { C: 0.33, Am: 0.33, F: 0.33 }),\n      new NotesToChord([\"E\", \"G\"], { Em: 0.33, C: 0.33, Am: 0.33 }),\n      new NotesToChord([\"E\", \"A\"], { Am: 0.33, F: 0.33, A: 0.33 }),\n      new NotesToChord([\"E\", \"B\"], { Em: 0.33, E: 0.33, C: 0.33 }),\n      new NotesToChord([\"E\", -1], { Em: 0.33, C: 0.33, Am: 0.33 }),\n\n      //F\n      new NotesToChord([\"F\", \"C\"], { F: 0.33, Fm: 0.33, Dm: 0.33 }),\n      new NotesToChord([\"F\", \"D\"], { Dm: 0.33, Bdim: 0.33, Bb: 0.33 }),\n      new NotesToChord([\"F\", \"E\"], { F: 0.33, Dm: 0.33, F: 0.33 }),\n      new NotesToChord([\"F\", \"F\"], { F: 0.33, Dm: 0.5, Bdim: 0.33 }),\n      new NotesToChord([\"F\", \"G\"], { F: 0.33, G: 0.33, Dm: 0.33 }),\n      new NotesToChord([\"F\", \"A\"], { F: 0.33, Bdim: 0.33, Dm: 0.33 }),\n      new NotesToChord([\"F\", \"B\"], { Bdim: 0.33, Em: 0.33, G: 0.33 }),\n      new NotesToChord([\"F\", -1], { F: 0.33, Dm: 0.33, Bdim: 0.33 }),\n\n      //G\n      new NotesToChord([\"G\", \"C\"], { G: 0.33, Am: 0.33, Cm: 0.33 }),\n      new NotesToChord([\"G\", \"D\"], { G: 0.33, Em: 0.33, C: 0.33 }),\n      new NotesToChord([\"G\", \"E\"], { C: 0.33, Em: 0.33, Am: 0.33 }),\n      new NotesToChord([\"G\", \"F\"], { F: 0.33, Dm: 0.33, G: 0.33 }),\n      new NotesToChord([\"G\", \"G\"], { G: 0.33, C: 0.5, Em: 0.33 }),\n      new NotesToChord([\"G\", \"A\"], { C: 0.33, Am: 0.33, Em: 0.33 }),\n      new NotesToChord([\"G\", \"B\"], { G: 0.33, Em: 0.33, C: 0.33 }),\n      new NotesToChord([\"G\", -1], { G: 0.33, C: 0.33, Em: 0.33 }),\n\n      //A\n      new NotesToChord([\"A\", \"C\"], { Am: 0.33, F: 0.33, Dm: 0.33 }),\n      new NotesToChord([\"A\", \"D\"], { Dm: 0.33, Am: 0.33, D: 0.33 }),\n      new NotesToChord([\"A\", \"E\"], { Am: 0.33, C: 0.33, \"F#dim\": 0.33 }),\n      new NotesToChord([\"A\", \"F\"], { F: 0.33, Dm: 0.33, Bdim: 0.33 }),\n      new NotesToChord([\"A\", \"G\"], { Am: 0.33, Em: 0.33, C: 0.33 }),\n      new NotesToChord([\"A\", \"A\"], { Am: 0.33, F: 0.5, Dm: 0.33 }),\n      new NotesToChord([\"A\", \"B\"], { Am: 0.33, Bdim: 0.33, Em: 0.33 }),\n      new NotesToChord([\"A\", -1], { Am: 0.33, Dm: 0.33, F: 0.33 }),\n\n      //B\n      new NotesToChord([\"B\", \"C\"], { C: 0.33, Bdim: 0.33, Em: 0.33 }),\n      new NotesToChord([\"B\", \"D\"], { Bdim: 0.33, G: 0.33, Em: 0.33 }),\n      new NotesToChord([\"B\", \"E\"], { Em: 0.33, E: 0.33, C: 0.33 }),\n      new NotesToChord([\"B\", \"F\"], { Bdim: 0.33, Em: 0.33, G: 0.33 }),\n      new NotesToChord([\"B\", \"G\"], { G: 0.33, Em: 0.33, C: 0.33 }),\n      new NotesToChord([\"B\", \"A\"], { Am: 0.33, Bdim: 0.33, Em: 0.33 }),\n      new NotesToChord([\"B\", \"B\"], { Bdim: 0.33, G: 0.33, Em: 0.33 }),\n      new NotesToChord([\"B\", -1], { Bdim: 0.33, G: 0.33, Em: 0.33 }),\n    ];\n  }\n\n  cartesian = (...a) =>\n    a.reduce((a, b) => a.flatMap((d) => b.map((e) => [d, e].flat())));\n\n  getChordsForMelody(notes) {\n    let possibleChordsList = [];\n    //get list of notes - input melody\n    //return - all possible chords progressions.\n    for (let i = 0; i < notes.length; i++) {\n      if (i % 2 === 1) continue;\n      let possibleChords = this.notesToChordList.find(\n        (e) => e.notes[0] === notes[i] && e.notes[1] === notes[i + 1]\n      );\n      if (possibleChords !== undefined) {\n        possibleChordsList.push(\n          Object.keys(possibleChords.chords).map((item) => item)\n        );\n      }\n    }\n    \n    let progressions = this.cartesian(\n      possibleChordsList[0],\n      possibleChordsList[1]\n    );\n\n    for (let i = 2; i < possibleChordsList.length; i++) {\n      progressions = this.cartesian(progressions, possibleChordsList[i]);\n    }\n\n    return progressions;\n  }\n\n  // getNMaxLikelyChords(notes, N) {\n  //   let ans = this.notesToChordList.find(\n  //     (e) => e.notes[0] === notes[0] && e.notes[1] === notes[1]\n  //   );\n\n  //   ans = Object.keys(ans.chords).sort((a, b) => ans.chords[b] - ans.chords[a]);\n  //   ans = N < 0 || N >= ans.length ? ans : ans.slice(0, N);\n  //   return ans;\n  // }\n}\nexport default MelodyMachine;\n","C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\generator.js",[],{"ruleId":"23","severity":1,"message":"24","line":65,"column":31,"nodeType":"25","messageId":"26","endLine":65,"endColumn":33},{"ruleId":"23","severity":1,"message":"24","line":75,"column":29,"nodeType":"25","messageId":"26","endLine":75,"endColumn":31},{"ruleId":"27","severity":1,"message":"28","line":53,"column":57,"nodeType":"29","messageId":"30","endLine":53,"endColumn":58},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-dupe-keys","Duplicate key 'F'.","ObjectExpression","unexpected"]