[{"C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\index.js":"1","C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\harmMachine.js":"2","C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\melodyMachine.js":"3","C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\generator.js":"4"},{"size":10548,"mtime":1614693493772,"results":"5","hashOfConfig":"6"},{"size":2749,"mtime":1614520832299,"results":"7","hashOfConfig":"6"},{"size":5967,"mtime":1614503999570,"results":"8","hashOfConfig":"6"},{"size":2476,"mtime":1614691074323,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hai7qw",{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\index.js",[],"C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\harmMachine.js",["19","20"],"//get seq of chords , and check the prob of this option\n\nclass HarmMachine {\n  constructor() {\n    this.valid_chords_prog = [\n      [\"C\", \"C\", \"F\", \"C\", \"Dm\", \"C\", \"G\", \"C\"],\n      [\"C\", \"Am\", \"F\", \"G\", \"C\"],\n      [\"C\", \"Em\", \"F\", \"G\", \"C\"],\n      [\"C\", \"F\", \"Am\", \"G\", \"C\"],\n      [\"C\", \"F\", \"G\", \"F\", \"C\"],\n      [\"C\", \"F\", \"C\", \"G\", \"C\"],\n      [\"C\", \"F\", \"G\", \"Am\"],\n      [\"C\", \"F\", \"Dm\", \"G\"],\n      [\"C\", \"Am\", \"Dm\", \"G\"],\n      [\"C\", \"Dm\", \"Em\", \"F\", \"G\", \"C\"],\n      [\"C\", \"Em\", \"F\", \"Am\"],\n      [\"C\", \"E\", \"Am\", \"F\", \"C\"],\n      [\"C\", \"G\", \"F\", \"G\"],\n      [\"Dm\", \"G\", \"C\", \"F\", \"Bdim\", \"E\", \"Am\"],\n      [\"Am\", \"C\", \"F\", \"E\"],\n      [\"Am\", \"F\", \"C\", \"G\"],\n      [\"Am\", \"F\", \"Bdim\", \"E\"],\n      [\"Am\", \"F\", \"D\", \"E\"],\n      [\"Am\", \"G\", \"F\", \"E\"],\n      [\"Am\", \"C\", \"Dm\", \"Em\"],\n      [\"Am\", \"D\", \"E\", \"Am\"],\n      [\"F\", \"G\", \"Am\", \"Em\"],\n      [\"C\", \"F\", \"Bb\", \"F\"],\n      [\"C\", \"C\", \"Bdim\", \"E\", \"Am\", \"Am\", \"F\", \"G\"],\n      [\"C\", \"C\", \"F\", \"C\", \"G\", \"F\", \"C\", \"G\"],\n      [\"C\", \"G\", \"Am\", \"F\"],\n      [\"C\", \"G\", \"Am\", \"Em\", \"F\", \"C\", \"F\", \"G\"],\n    ];\n\n    this.valid_chords_prog = this.valid_chords_prog.concat(\n      this.duplicateProg()\n    );\n  }\n\n  duplicateProg() {\n    var dupProgs = [];\n    for (let prog of this.valid_chords_prog) {\n      let dup = [];\n      for (let c of prog) {\n        dup.push(c);\n        dup.push(c);\n      }\n      dupProgs.push(dup);\n    }\n    return dupProgs;\n  }\n  getNgram(sequence, n) {\n    var ngramsArray = [];\n    for (var i = 0; i < sequence.length - (n - 1); i++) {\n      var subNgramsArray = [];\n      for (var j = 0; j < n; j++) {\n        subNgramsArray.push(sequence[i + j]);\n      }\n      ngramsArray.push(subNgramsArray);\n    }\n    return ngramsArray;\n  }\n\n  createProbabilitiesMap(n) {\n    let sequence = this.valid_chords_prog;\n    let result = {};\n    let items = [];\n    for (let prog of sequence) {\n      items = items.concat(this.getNgram(prog, n));\n    }\n\n    for (let subarray of items) {\n      let x = subarray[0],\n        y = subarray[1];\n      if (result[x] === undefined) {\n        result[x] = [];\n      }\n      result[x].push(y);\n    }\n    // { 60: [62, 62, 62, 65], 64: [64, 64, 62, 62]}\n    Object.keys(result).map((key) => {\n      result[key] = this.getProbabilities(result[key]);\n    });\n\n    return result;\n  }\n\n  getProbabilities(sequence) {\n    let freq = this.getFrequencyMap(sequence);\n    let length = Object.values(freq).reduce((a, b) => a + b);\n    Object.keys(freq).map((key) => {\n      freq[key] /= length; // 3 > 3/4, 1 > 1/4\n    });\n\n    return freq;\n  }\n\n  getFrequencyMap(sequence) {\n    let freq = {};\n    for (let item of sequence) {\n      if (freq[item]) freq[item]++;\n      else freq[item] = 1;\n    }\n\n    return freq;\n  }\n}\n\nexport default HarmMachine;\n","C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\melodyMachine.js",[],"C:\\Users\\orna\\vscodeprojects\\final_projectCM\\src\\generator.js",[],{"ruleId":"21","severity":1,"message":"22","line":81,"column":35,"nodeType":"23","messageId":"24","endLine":81,"endColumn":37},{"ruleId":"21","severity":1,"message":"22","line":91,"column":33,"nodeType":"23","messageId":"24","endLine":91,"endColumn":35},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]